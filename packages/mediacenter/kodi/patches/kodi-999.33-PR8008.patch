diff -Naur kodi-17.1-Krypton/docs/README.linux kodi-17.1-Krypton.patch/docs/README.linux
--- kodi-17.1-Krypton/docs/README.linux	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/docs/README.linux	2017-03-25 11:51:12.769040700 +0100
@@ -56,7 +56,7 @@
   libshairplay-dev, libsmbclient-dev, libsqlite3-dev, libssh-dev, libssl-dev, libswscale-dev,
   libtag1-dev (>= 1.8), libtinyxml-dev (>= 2.6.2), libtool, libudev-dev,
   libusb-dev, libva-dev, libvdpau-dev, libxml2-dev,
-  libxmu-dev, libxrandr-dev, libxslt1-dev, libxt-dev, libyajl-dev (>=2.0), lsb-release,
+  libxmu-dev, libxrandr-dev, libxslt1-dev, libxt-dev, lsb-release, rapidjson-dev,
   nasm [!amd64], python-dev, python-imaging, python-support, swig, unzip, uuid-dev, yasm,
   zip, zlib1g-dev
 
diff -Naur kodi-17.1-Krypton/docs/README.ubuntu kodi-17.1-Krypton.patch/docs/README.ubuntu
--- kodi-17.1-Krypton/docs/README.ubuntu	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/docs/README.ubuntu	2017-03-25 11:51:12.769040700 +0100
@@ -90,16 +90,12 @@
       libpcre3-dev libplist-dev libpng-dev libpulse-dev libsdl2-dev libsmbclient-dev \
       libsqlite3-dev libssh-dev libssl-dev libtinyxml-dev libtool libudev-dev libusb-dev \
       libva-dev libvdpau-dev libxml2-dev libxmu-dev libxrandr-dev \
-      libxrender-dev libxslt1-dev libxt-dev libyajl-dev mesa-utils nasm pmount python-dev \
-      python-imaging python-sqlite swig unzip uuid-dev yasm zip zlib1g-dev
+      libxrender-dev libxslt1-dev libxt-dev mesa-utils nasm pmount python-dev python-imaging \
+      python-sqlite rapidjson-dev swig unzip uuid-dev yasm zip zlib1g-dev
 
 For >= 10.10:
     $ sudo apt-get install autopoint libltdl-dev
 
-For >= 12.04 lts: Backport for Precise of libyajl2
-    $ sudo add-apt-repository ppa:team-xbmc/xbmc-nightly
-    $ sudo apt-get install libyajl-dev
-
 Note: Ubuntu Precise users also need a upgraded GCC, else compile will fail.
 
 For >= 12.10:
diff -Naur kodi-17.1-Krypton/project/BuildDependencies/scripts/0_package.list kodi-17.1-Krypton.patch/project/BuildDependencies/scripts/0_package.list
--- kodi-17.1-Krypton/project/BuildDependencies/scripts/0_package.list	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/project/BuildDependencies/scripts/0_package.list	2017-03-25 11:51:12.769040700 +0100
@@ -30,7 +30,6 @@
 libssh-0.7.0-win32-vc140.7z
 libxml2-2.9.4-win32-vc140-v2.7z
 libxslt-1.1.29-win32-vc140.7z
-libyajl-2.0.1-win32.7z
 lzo-2.09-win32-vc140-v3.7z
 mini_wdk-10.0.14393.0-win32.7z
 mysql-connector-c-6.1.6-win32-vc140-v2.7z
@@ -38,6 +37,7 @@
 pcre-8.37-win32-vc140-v3.7z
 pillow-3.1.0-win32-vc140.7z
 python-2.7.11-win32-vc140-v2.7z
+rapidjson-1.0.2-win32.7z
 shairplay-0.9.0-win32-vc140-v2.7z
 sqlite-3.10.2-win32-vc140.7z
 swig-3.0.10-win32.7z
diff -Naur kodi-17.1-Krypton/project/cmake/CMakeLists.txt kodi-17.1-Krypton.patch/project/cmake/CMakeLists.txt
--- kodi-17.1-Krypton/project/cmake/CMakeLists.txt	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/project/cmake/CMakeLists.txt	2017-03-25 11:52:35.744239243 +0100
@@ -102,8 +102,8 @@
 list(APPEND DEPLIBS ${CMAKE_THREAD_LIBS_INIT})
 
 # Required dependencies
-set(required_deps Sqlite3 FreeType PCRE Cpluff LibDvd
-                  TinyXML Python Yajl Cdio
+set(required_deps Sqlite3 FreeType PCRE RapidJSON Cpluff LibDvd
+                  TinyXML Python Cdio
                   Lzo2 Fribidi TagLib FFMPEG CrossGUID)
 if(NOT WIN32)
   list(APPEND required_deps ZLIB)
diff -Naur kodi-17.1-Krypton/project/cmake/modules/FindRapidJSON.cmake kodi-17.1-Krypton.patch/project/cmake/modules/FindRapidJSON.cmake
--- kodi-17.1-Krypton/project/cmake/modules/FindRapidJSON.cmake	1970-01-01 01:00:00.000000000 +0100
+++ kodi-17.1-Krypton.patch/project/cmake/modules/FindRapidJSON.cmake	2017-03-25 12:00:40.098396835 +0100
@@ -0,0 +1,31 @@
+#.rst:
+# FindRapidJSON
+# -----------
+# Finds the RapidJSON library
+#
+# This will define the following variables::
+#
+# RapidJSON_FOUND - system has RapidJSON parser
+# RapidJSON_INCLUDE_DIRS - the RapidJSON parser include directory
+#
+
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PC_RapidJSON RapidJSON QUIET)
+endif()
+
+find_path(RapidJSON_INCLUDE_DIR NAMES rapidjson/rapidjson.h
+                                PATHS ${PC_RapidJSON_INCLUDEDIR})
+
+set(RapidJSON_VERSION ${PC_RapidJSON_VERSION})
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(RAPIDJSON
+                                  REQUIRED_VARS RapidJSON_INCLUDE_DIR
+                                  VERSION_VAR RapidJSON_VERSION)
+
+if(RAPIDJSON_FOUND)
+  set(RAPIDJSON_INCLUDE_DIRS ${RapidJSON_INCLUDE_DIR})
+endif()
+
+mark_as_advanced(RapidJSON_INCLUDE_DIR)
+
diff -Naur kodi-17.1-Krypton/tools/darwin/Configurations/App.xcconfig.in kodi-17.1-Krypton.patch/tools/darwin/Configurations/App.xcconfig.in
--- kodi-17.1-Krypton/tools/darwin/Configurations/App.xcconfig.in	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/tools/darwin/Configurations/App.xcconfig.in	2017-03-25 11:51:12.769040700 +0100
@@ -25,7 +25,7 @@
 LIBRARY_SEARCH_PATHS = $(inherited) $(SRCROOT) $(SRCROOT)/xbmc/interfaces/json-rpc "$(SRCROOT)/xbmc/interfaces/python" "$(SRCROOT)/xbmc/interfaces/legacy"
 FRAMEWORK_SEARCH_PATHS = $(inherited) "$(SDKROOT)/System/Library/PrivateFrameworks/" "$(SDKROOT)/System/Library/Frameworks/"
 
-XBMC_OTHER_LDFLAGS_COMMON = $(inherited) -Wl,-headerpad_max_install_names -Wl,-all_load -L$XBMC_DEPENDS/lib -lbz2 -lintl -lexpat -lssl -lgpg-error -lresolv -lffi -lssh -llzo2 -lpcre -lpcrecpp -lfribidi -lfreetype -lfontconfig -lsqlite3 -ltinyxml -lmicrohttpd -lsmbclient -lpython2.7 -lyajl -lcrypto -lgcrypt -lavdevice -lavfilter -lavcodec -lavformat -lpostproc -lavutil -lswresample -lswscale -ltag -L$XBMC_DEPENDS/lib/mysql -lmysqlclient -lxml2 -lxslt -lnettle -lgmp -lhogweed -lgnutls -lcrossguid -lz -lm -liconv
+XBMC_OTHER_LDFLAGS_COMMON = $(inherited) -Wl,-headerpad_max_install_names -Wl,-all_load -L$XBMC_DEPENDS/lib -lbz2 -lintl -lexpat -lssl -lgpg-error -lresolv -lffi -lssh -llzo2 -lpcre -lpcrecpp -lfribidi -lfreetype -lfontconfig -lsqlite3 -ltinyxml -lmicrohttpd -lsmbclient -lpython2.7 -lcrypto -lgcrypt -lavdevice -lavfilter -lavcodec -lavformat -lpostproc -lavutil -lswresample -lswscale -ltag -L$XBMC_DEPENDS/lib/mysql -lmysqlclient -lxml2 -lxslt -lnettle -lgmp -lhogweed -lgnutls -lcrossguid -lz -lm -liconv
 
 CLANG_CXX_LANGUAGE_STANDARD = c++0x
 CLANG_CXX_LIBRARY = libc++
diff -Naur kodi-17.1-Krypton/tools/depends/target/Makefile kodi-17.1-Krypton.patch/tools/depends/target/Makefile
--- kodi-17.1-Krypton/tools/depends/target/Makefile	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/tools/depends/target/Makefile	2017-03-25 11:53:48.622413420 +0100
@@ -9,7 +9,7 @@
 	libgcrypt bzip2 liblzo2 libzip freetype2 fontconfig \
 	openssl gmp nettle gnutls curl \
 	libjpeg-turbo libpng fribidi libass \
-	libxml2 yajl libmicrohttpd mysql libffi \
+	libxml2 rapidjson libmicrohttpd mysql libffi \
 	python27 libshairplay \
 	libplist libcec libbluray tinyxml dummy-libxbmc \
 	libamplayer libssh taglib libusb libnfs \
diff -Naur kodi-17.1-Krypton/tools/depends/target/rapidjson/0001-remove_custom_cxx_flags.patch kodi-17.1-Krypton.patch/tools/depends/target/rapidjson/0001-remove_custom_cxx_flags.patch
--- kodi-17.1-Krypton/tools/depends/target/rapidjson/0001-remove_custom_cxx_flags.patch	1970-01-01 01:00:00.000000000 +0100
+++ kodi-17.1-Krypton.patch/tools/depends/target/rapidjson/0001-remove_custom_cxx_flags.patch	2017-03-25 11:51:12.770040703 +0100
@@ -0,0 +1,18 @@
+diff -rupN a/CMakeLists.txt b/CMakeLists.txt
+--- a/CMakeLists.txt	2015-09-10 18:33:21.048580591 +0200
++++ b/CMakeLists.txt	2015-09-10 18:34:19.136579486 +0200
+@@ -25,14 +25,6 @@ if(RAPIDJSON_HAS_STDSTRING)
+     add_definitions(-DRAPIDJSON_HAS_STDSTRING)
+ endif()
+ 
+-if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
+-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native -Wall -Wextra")
+-elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native -Wall -Wextra")
+-elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
+-    add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
+-endif()
+-
+ #add extra search paths for libraries and includes
+ SET(INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/include" CACHE PATH "The directory the headers are installed in")
+ SET(LIB_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/lib" CACHE STRING "Directory where lib will install")
diff -Naur kodi-17.1-Krypton/tools/depends/target/rapidjson/Makefile kodi-17.1-Krypton.patch/tools/depends/target/rapidjson/Makefile
--- kodi-17.1-Krypton/tools/depends/target/rapidjson/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ kodi-17.1-Krypton.patch/tools/depends/target/rapidjson/Makefile	2017-03-25 11:51:12.770040703 +0100
@@ -0,0 +1,59 @@
+include ../../Makefile.include
+DEPS = Makefile 0001-remove_custom_cxx_flags.patch
+
+# lib name, version
+LIBNAME=rapidjson
+VERSION=1.0.2
+SOURCE=$(LIBNAME)-$(VERSION)
+ARCHIVE=$(SOURCE).tar.gz
+
+CMAKE_OPTIONS=-DRAPIDJSON_HAS_STDSTRING=ON -DRAPIDJSON_BUILD_DOC=OFF -DRAPIDJSON_BUILD_EXAMPLES=OFF -DRAPIDJSON_BUILD_TESTS=OFF -DRAPIDJSON_BUILD_THIRDPARTY_GTEST=OFF
+
+ifeq ($(CROSS_COMPILING), yes)
+  DEPS += ../../Makefile.include
+else
+  CXXFLAGS += -std=c++11
+  ROOT_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
+
+  ifeq ($(PLATFORM),)
+    PLATFORM = native
+    TARBALLS_LOCATION = $(ROOT_DIR)
+    BASE_URL := http://mirrors.kodi.tv/build-deps/sources
+    RETRIEVE_TOOL := curl
+    RETRIEVE_TOOL_FLAGS := -Ls --create-dirs -f -O
+    ARCHIVE_TOOL := tar
+    ARCHIVE_TOOL_FLAGS := --strip-components=1 -xf
+    CMAKE := cmake
+    CMAKE_OPTIONS := -DCMAKE_INSTALL_PREFIX=$(PREFIX) $(CMAKE_OPTIONS)
+  endif
+endif
+
+all: .installed-$(PLATFORM)
+
+$(TARBALLS_LOCATION)/$(ARCHIVE):
+	cd $(TARBALLS_LOCATION); $(RETRIEVE_TOOL) $(RETRIEVE_TOOL_FLAGS) $(BASE_URL)/$(ARCHIVE)
+
+$(PLATFORM): $(TARBALLS_LOCATION)/$(ARCHIVE) $(DEPS)
+ifeq ($(PREFIX),)
+	@echo
+	@echo "ERROR: please set PREFIX to the kodi install path e.g. make PREFIX=/usr/local"
+	@exit 1
+endif
+	rm -rf $(PLATFORM); mkdir -p $(PLATFORM)
+	cd $(PLATFORM); $(ARCHIVE_TOOL) $(ARCHIVE_TOOL_FLAGS) $(TARBALLS_LOCATION)/$(ARCHIVE)
+	cd $(PLATFORM); rm -rf build; mkdir -p build
+	cd $(PLATFORM); patch -p1 < ../0001-remove_custom_cxx_flags.patch
+	cd $(PLATFORM)/build; $(CMAKE) $(CMAKE_OPTIONS) ..
+
+.installed-$(PLATFORM): $(PLATFORM)
+	make -C $(PLATFORM)/build
+	make -C $(PLATFORM)/build install
+	rm -rf $(PREFIX)/share/doc/RapidJSON
+	touch $@
+
+clean:
+	$(MAKE) -C $(PLATFORM)/build clean
+	rm -f .installed-$(PLATFORM)
+
+distclean:
+	rm -rf $(PLATFORM) .installed-$(PLATFORM)
diff -Naur kodi-17.1-Krypton/tools/depends/target/yajl/Makefile kodi-17.1-Krypton.patch/tools/depends/target/yajl/Makefile
--- kodi-17.1-Krypton/tools/depends/target/yajl/Makefile	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/tools/depends/target/yajl/Makefile	1970-01-01 01:00:00.000000000 +0100
@@ -1,43 +0,0 @@
-include ../../Makefile.include
-DEPS= ../../Makefile.include Makefile static.patch
-
-# lib name, version
-LIBNAME=yajl
-VERSION=2.0.1
-SOURCE=lloyd-$(LIBNAME)-f4b2b1a
-ARCHIVE=$(LIBNAME)-$(VERSION).tar.gz
-# configuration settings
-LIBDYLIB=$(PLATFORM)/build/$(LIBNAME)-$(VERSION)/lib/libyajl.a
-
-CLEAN_FILES=$(ARCHIVE) $(PLATFORM)
-
-all: .installed-$(PLATFORM)
-
-$(TARBALLS_LOCATION)/$(ARCHIVE):
-	cd $(TARBALLS_LOCATION); $(RETRIEVE_TOOL) $(RETRIEVE_TOOL_FLAGS) $(BASE_URL)/$(ARCHIVE)
-
-$(PLATFORM): $(TARBALLS_LOCATION)/$(ARCHIVE) $(DEPS)
-	rm -rf $(PLATFORM)/*; mkdir -p $(PLATFORM)
-	cd $(PLATFORM); $(ARCHIVE_TOOL) $(ARCHIVE_TOOL_FLAGS) $(TARBALLS_LOCATION)/$(ARCHIVE)
-	sed -ie "s|ADD_CUSTOM_TARGET|#ADD_CUSTOM_TARGET|g" "$(PLATFORM)/CMakeLists.txt"
-	sed -ie "s|./run_tests.sh|#./run_tests.sh|g" "$(PLATFORM)/CMakeLists.txt"
-	sed -ie "s|WORKING_DIRECTORY|#WORKING_DIRECTORY|g" "$(PLATFORM)/CMakeLists.txt"
-	sed -ie "s|ADD_SUBDIRECTORY(reformatter)|#ADD_SUBDIRECTORY(reformatter)|g" "$(PLATFORM)/CMakeLists.txt"
-	cd $(PLATFORM); patch -p0 < ../static.patch
-	cd $(PLATFORM); patch -p0 < ../shared.patch
-	cd $(PLATFORM); rm -rf build; mkdir -p build
-	cd $(PLATFORM)/build; $(CMAKE) ..
-
-$(LIBDYLIB): $(PLATFORM)
-	$(MAKE) -C $(PLATFORM)/build
-
-.installed-$(PLATFORM): $(LIBDYLIB)
-	$(MAKE) -C $(PLATFORM)/build install
-	touch $@
-
-clean:
-	$(MAKE) -C $(PLATFORM)/build clean
-	rm -f .installed-$(PLATFORM)
-
-distclean::
-	rm -rf $(PLATFORM) .installed-$(PLATFORM)
diff -Naur kodi-17.1-Krypton/tools/depends/target/yajl/shared.patch kodi-17.1-Krypton.patch/tools/depends/target/yajl/shared.patch
--- kodi-17.1-Krypton/tools/depends/target/yajl/shared.patch	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/tools/depends/target/yajl/shared.patch	1970-01-01 01:00:00.000000000 +0100
@@ -1,20 +0,0 @@
---- src/CMakeLists.txt.orig	2012-06-22 21:09:34.000000000 +0200
-+++ src/CMakeLists.txt	2012-06-22 21:11:49.000000000 +0200
-@@ -40,6 +40,8 @@
- 
- TARGET_LINK_LIBRARIES(yajl_s m) 
- 
-+TARGET_LINK_LIBRARIES(yajl m) 
-+
- #### setup shared library version number
- SET_TARGET_PROPERTIES(yajl PROPERTIES
-                       DEFINE_SYMBOL YAJL_SHARED
-@@ -79,7 +79,7 @@
- IF(NOT WIN32)
-   # at build time you may specify the cmake variable LIB_SUFFIX to handle
-   # 64-bit systems which use 'lib64'
--  INSTALL(TARGETS yajl LIBRARY DESTINATION lib${LIB_SUFFIX})
-+#  INSTALL(TARGETS yajl LIBRARY DESTINATION lib${LIB_SUFFIX})
-   INSTALL(TARGETS yajl_s ARCHIVE DESTINATION lib${LIB_SUFFIX})
-   INSTALL(FILES ${PUB_HDRS} DESTINATION include/yajl)
-   INSTALL(FILES ${incDir}/yajl_version.h DESTINATION include/yajl)
diff -Naur kodi-17.1-Krypton/tools/depends/target/yajl/static.patch kodi-17.1-Krypton.patch/tools/depends/target/yajl/static.patch
--- kodi-17.1-Krypton/tools/depends/target/yajl/static.patch	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/tools/depends/target/yajl/static.patch	1970-01-01 01:00:00.000000000 +0100
@@ -1,19 +0,0 @@
---- src/CMakeLists.txt.orig	2011-04-28 04:48:41.000000000 +0200
-+++ src/CMakeLists.txt	2012-06-22 21:07:59.000000000 +0200
-@@ -38,12 +38,16 @@
- 
- ADD_LIBRARY(yajl SHARED ${SRCS} ${HDRS} ${PUB_HDRS})
- 
-+TARGET_LINK_LIBRARIES(yajl_s m) 
-+
- #### setup shared library version number
- SET_TARGET_PROPERTIES(yajl PROPERTIES
-                       DEFINE_SYMBOL YAJL_SHARED
-                       SOVERSION ${YAJL_MAJOR}
-                       VERSION ${YAJL_MAJOR}.${YAJL_MINOR}.${YAJL_MICRO})
- 
-+SET_TARGET_PROPERTIES(yajl_s PROPERTIES OUTPUT_NAME yajl) 
-+
- #### ensure a .dylib has correct absolute installation paths upon installation
- IF(APPLE)
-   MESSAGE("INSTALL_NAME_DIR: ${CMAKE_INSTALL_PREFIX}/lib")
diff -Naur kodi-17.1-Krypton/.travis.yml kodi-17.1-Krypton.patch/.travis.yml
--- kodi-17.1-Krypton/.travis.yml	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/.travis.yml	2017-03-25 11:51:12.769040700 +0100
@@ -76,7 +76,7 @@
       libpcre3-dev libplist-dev libpng-dev libpulse-dev libsdl2-dev libsmbclient-dev libsqlite3-dev libssh-dev
       libssl-dev libtag1-dev libtinyxml-dev libtool libudev-dev libusb-dev libva-dev libvdpau-dev
       libxml2-dev libxmu-dev libxrandr-dev libxrender-dev libxslt1-dev libxt-dev libyajl-dev mesa-utils
-      nasm pmount python-dev python-imaging python-sqlite swig unzip uuid-dev yasm zip zlib1g-dev;
+      nasm pmount python-dev python-imaging python-sqlite rapidjson-dev swig unzip uuid-dev yasm zip zlib1g-dev;
     fi
 
 # Prepare builds
diff -Naur kodi-17.1-Krypton/xbmc/addons/AddonDatabase.cpp kodi-17.1-Krypton.patch/xbmc/addons/AddonDatabase.cpp
--- kodi-17.1-Krypton/xbmc/addons/AddonDatabase.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/addons/AddonDatabase.cpp	2017-03-25 11:51:13.084041454 +0100
@@ -76,12 +76,16 @@
     variant["extrainfo"].push_back(std::move(info));
   }
 
-  return CJSONVariantWriter::Write(variant, true);
+  std::string json;
+  CJSONVariantWriter::Write(variant, json, true);
+  return json;
 }
 
 static void DeserializeMetadata(const std::string& document, CAddonBuilder& builder)
 {
-  CVariant variant = CJSONVariantParser::Parse(document);
+  CVariant variant;
+  if (!CJSONVariantParser::Parse(document, variant))
+    return;
 
   builder.SetAuthor(variant["author"].asString());
   builder.SetDisclaimer(variant["disclaimer"].asString());
diff -Naur kodi-17.1-Krypton/xbmc/interfaces/builtins/ApplicationBuiltins.cpp kodi-17.1-Krypton.patch/xbmc/interfaces/builtins/ApplicationBuiltins.cpp
--- kodi-17.1-Krypton/xbmc/interfaces/builtins/ApplicationBuiltins.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/interfaces/builtins/ApplicationBuiltins.cpp	2017-03-25 11:51:12.770040703 +0100
@@ -90,7 +90,13 @@
 {
   CVariant data;
   if (params.size() > 2)
-    data = CJSONVariantParser::Parse((const unsigned char *)params[2].c_str(), params[2].size());
+  {
+    if (!CJSONVariantParser::Parse(params[2], data))
+    {
+      CLog::Log(LOGERROR, "NotifyAll failed to parse data: %s", params[2].c_str());
+      return -3;
+    }
+  }
 
   ANNOUNCEMENT::CAnnouncementManager::GetInstance().Announce(ANNOUNCEMENT::Other, params[0].c_str(), params[1].c_str(), data);
 
diff -Naur kodi-17.1-Krypton/xbmc/interfaces/json-rpc/IJSONRPCAnnouncer.h kodi-17.1-Krypton.patch/xbmc/interfaces/json-rpc/IJSONRPCAnnouncer.h
--- kodi-17.1-Krypton/xbmc/interfaces/json-rpc/IJSONRPCAnnouncer.h	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/interfaces/json-rpc/IJSONRPCAnnouncer.h	2017-03-25 11:51:13.084041454 +0100
@@ -44,7 +44,10 @@
       root["params"]["data"] = data;
       root["params"]["sender"] = sender;
 
-      return CJSONVariantWriter::Write(root, compactOutput);
+      std::string str;
+      CJSONVariantWriter::Write(root, str, compactOutput);
+
+      return str;
     }
   };
 }
diff -Naur kodi-17.1-Krypton/xbmc/interfaces/json-rpc/JSONRPC.cpp kodi-17.1-Krypton.patch/xbmc/interfaces/json-rpc/JSONRPC.cpp
--- kodi-17.1-Krypton/xbmc/interfaces/json-rpc/JSONRPC.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/interfaces/json-rpc/JSONRPC.cpp	2017-03-25 11:51:13.084041454 +0100
@@ -241,8 +241,7 @@
   if(g_advancedSettings.CanLogComponent(LOGJSONRPC))
     CLog::Log(LOGDEBUG, "JSONRPC: Incoming request: %s", inputString.c_str());
 
-  inputroot = CJSONVariantParser::Parse((unsigned char *)inputString.c_str(), inputString.length());
-  if (!inputroot.isNull())
+  if (CJSONVariantParser::Parse(inputString, inputroot) && !inputroot.isNull())
   {
     if (inputroot.isArray())
     {
@@ -275,7 +274,10 @@
     hasResponse = true;
   }
 
-  std::string str = hasResponse ? CJSONVariantWriter::Write(outputroot, g_advancedSettings.m_jsonOutputCompact) : "";
+  std::string str;
+  if (hasResponse)
+    CJSONVariantWriter::Write(outputroot, str, g_advancedSettings.m_jsonOutputCompact);
+
   return str;
 }
 
@@ -302,7 +304,10 @@
   }
   else
   {
-    CLog::Log(LOGERROR, "JSONRPC: Failed to parse '%s'\n", CJSONVariantWriter::Write(request, true).c_str());
+    std::string str;
+    CJSONVariantWriter::Write(request, str, true);
+
+    CLog::Log(LOGERROR, "JSONRPC: Failed to parse '%s'\n", str.c_str());
     errorCode = InvalidRequest;
   }
 
diff -Naur kodi-17.1-Krypton/xbmc/interfaces/json-rpc/JSONServiceDescription.cpp kodi-17.1-Krypton.patch/xbmc/interfaces/json-rpc/JSONServiceDescription.cpp
--- kodi-17.1-Krypton/xbmc/interfaces/json-rpc/JSONServiceDescription.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/interfaces/json-rpc/JSONServiceDescription.cpp	2017-03-25 11:55:07.866602811 +0100
@@ -1428,10 +1428,8 @@
     description = StringUtils::Format("{%s}", description.c_str());
   }
 
-  descriptionObject = CJSONVariantParser::Parse((const unsigned char *)description.c_str(), description.size());
-
   // Make sure the method description actually exists and represents an object
-  if (!descriptionObject.isObject())
+  if (!CJSONVariantParser::Parse(description, descriptionObject) || !descriptionObject.isObject())
   {
     CLog::Log(LOGERROR, "JSONRPC: Unable to parse JSON Schema definition for \"%s\"", name.c_str());
     return false;
diff -Naur kodi-17.1-Krypton/xbmc/interfaces/python/XBPython.cpp kodi-17.1-Krypton.patch/xbmc/interfaces/python/XBPython.cpp
--- kodi-17.1-Krypton/xbmc/interfaces/python/XBPython.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/interfaces/python/XBPython.cpp	2017-03-25 11:51:13.085041457 +0100
@@ -118,7 +118,9 @@
      OnDPMSActivated();
   }
 
-  OnNotification(sender, std::string(ANNOUNCEMENT::AnnouncementFlagToString(flag)) + "." + std::string(message), CJSONVariantWriter::Write(data, g_advancedSettings.m_jsonOutputCompact));
+  std::string jsonData;
+  if (CJSONVariantWriter::Write(data, jsonData, g_advancedSettings.m_jsonOutputCompact))
+    OnNotification(sender, std::string(ANNOUNCEMENT::AnnouncementFlagToString(flag)) + "." + std::string(message), jsonData);
 }
 
 // message all registered callbacks that we started playing
diff -Naur kodi-17.1-Krypton/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp kodi-17.1-Krypton.patch/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp
--- kodi-17.1-Krypton/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/network/httprequesthandler/HTTPJsonRpcHandler.cpp	2017-03-25 11:51:13.085041457 +0100
@@ -94,7 +94,13 @@
     // get the whole output of JSONRPC.Introspect
     CVariant result;
     JSONRPC::CJSONServiceDescription::Print(result, &m_transportLayer, &client);
-    m_responseData = CJSONVariantWriter::Write(result, false);
+    if (!CJSONVariantWriter::Write(result, m_responseData, false))
+    {
+      m_response.type = HTTPError;
+      m_response.status = MHD_HTTP_INTERNAL_SERVER_ERROR;
+
+      return MHD_YES;
+    }
   }
   else
   {
diff -Naur kodi-17.1-Krypton/xbmc/network/test/TestWebServer.cpp kodi-17.1-Krypton.patch/xbmc/network/test/TestWebServer.cpp
--- kodi-17.1-Krypton/xbmc/network/test/TestWebServer.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/network/test/TestWebServer.cpp	2017-03-25 11:51:12.771040705 +0100
@@ -384,7 +384,8 @@
   ASSERT_FALSE(result.empty());
 
   // parse the JSON-RPC response
-  CVariant resultObj = CJSONVariantParser::Parse(reinterpret_cast<const unsigned char*>(result.c_str()), result.size());
+  CVariant resultObj;
+  ASSERT_TRUE(CJSONVariantParser::Parse(result, resultObj));
   // make sure it's an object
   ASSERT_TRUE(resultObj.isObject());
 
diff -Naur kodi-17.1-Krypton/xbmc/playlists/SmartPlayList.cpp kodi-17.1-Krypton.patch/xbmc/playlists/SmartPlayList.cpp
--- kodi-17.1-Krypton/xbmc/playlists/SmartPlayList.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/playlists/SmartPlayList.cpp	2017-03-25 11:51:13.085041457 +0100
@@ -1267,7 +1267,10 @@
   if (json.empty())
     return false;
 
-  CVariant obj = CJSONVariantParser::Parse((const unsigned char *)json.c_str(), json.size());
+  CVariant obj;
+  if (!CJSONVariantParser::Parse(json, obj))
+    return false;
+
   return Load(obj);
 }
 
@@ -1364,8 +1367,7 @@
   if (!Save(xsp, full))
     return false;
 
-  json = CJSONVariantWriter::Write(xsp, true);
-  return json.size() > 0;
+  return CJSONVariantWriter::Write(xsp, json, true) && !json.empty();
 }
 
 void CSmartPlaylist::Reset()
diff -Naur kodi-17.1-Krypton/xbmc/utils/JSONVariantParser.cpp kodi-17.1-Krypton.patch/xbmc/utils/JSONVariantParser.cpp
--- kodi-17.1-Krypton/xbmc/utils/JSONVariantParser.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/utils/JSONVariantParser.cpp	2017-03-25 11:51:12.772040708 +0100
@@ -20,200 +20,202 @@
 
 #include "JSONVariantParser.h"
 
-yajl_callbacks CJSONVariantParser::callbacks = {
-  CJSONVariantParser::ParseNull,
-  CJSONVariantParser::ParseBoolean,
-  CJSONVariantParser::ParseInteger,
-  CJSONVariantParser::ParseDouble,
-  NULL,
-  CJSONVariantParser::ParseString,
-  CJSONVariantParser::ParseMapStart,
-  CJSONVariantParser::ParseMapKey,
-  CJSONVariantParser::ParseMapEnd,
-  CJSONVariantParser::ParseArrayStart,
-  CJSONVariantParser::ParseArrayEnd
-};
+#include <rapidjson/reader.h>
 
-CJSONVariantParser::CJSONVariantParser(IParseCallback *callback)
+class CJSONVariantParserHandler
 {
-  m_callback = callback;
+public:
+  CJSONVariantParserHandler(CVariant& parsedObject);
 
-  m_handler = yajl_alloc(&callbacks, NULL, this);
+  bool Null();
+  bool Bool(bool b);
+  bool Int(int i);
+  bool Uint(unsigned u);
+  bool Int64(int64_t i);
+  bool Uint64(uint64_t u);
+  bool Double(double d);
+  bool String(const char* str, rapidjson::SizeType length, bool copy);
+  bool StartObject();
+  bool Key(const char* str, rapidjson::SizeType length, bool copy);
+  bool EndObject(rapidjson::SizeType memberCount);
+  bool StartArray();
+  bool EndArray(rapidjson::SizeType elementCount);
+
+private:
+  template <typename... TArgs>
+  bool Primitive(TArgs... args)
+  {
+    PushObject(CVariant(std::forward<TArgs>(args)...));
+    PopObject();
 
-  yajl_config(m_handler, yajl_allow_comments, 1);
-  yajl_config(m_handler, yajl_dont_validate_strings, 0);
+    return true;
+  }
 
-  m_status = ParseVariable;
-}
+  void PushObject(CVariant variant);
+  void PopObject();
 
-CJSONVariantParser::~CJSONVariantParser()
-{
-  yajl_complete_parse(m_handler);
-  yajl_free(m_handler);
-}
+  CVariant& m_parsedObject;
+  std::vector<CVariant *> m_parse;
+  std::string m_key;
+
+  enum class PARSE_STATUS
+  {
+    Variable,
+    Array,
+    Object
+  };
+  PARSE_STATUS m_status;
+};
+
+CJSONVariantParserHandler::CJSONVariantParserHandler(CVariant& parsedObject)
+  : m_parsedObject(parsedObject),
+    m_parse(),
+    m_key(),
+    m_status(PARSE_STATUS::Variable)
+{ }
 
-void CJSONVariantParser::push_buffer(const unsigned char *buffer, unsigned int length)
+bool CJSONVariantParserHandler::Null()
 {
-  yajl_parse(m_handler, buffer, length);
+  PushObject(CVariant::ConstNullVariant);
+  PopObject();
+
+  return true;
 }
 
-CVariant CJSONVariantParser::Parse(const std::string& json)
+bool CJSONVariantParserHandler::Bool(bool b)
 {
-  return Parse(reinterpret_cast<const unsigned char*>(json.c_str()), json.length());
+  return Primitive(b);
 }
 
-CVariant CJSONVariantParser::Parse(const unsigned char *json, unsigned int length)
+bool CJSONVariantParserHandler::Int(int i)
 {
-  CSimpleParseCallback callback;
-  CJSONVariantParser parser(&callback);
-
-  parser.push_buffer(json, length);
-
-  return callback.GetOutput();
+  return Primitive(i);
 }
 
-int CJSONVariantParser::ParseNull(void * ctx)
+bool CJSONVariantParserHandler::Uint(unsigned u)
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
-
-  parser->PushObject(CVariant::VariantTypeNull);
-  parser->PopObject();
-
-  return 1;
+  return Primitive(u);
 }
 
-int CJSONVariantParser::ParseBoolean(void * ctx, int boolean)
+bool CJSONVariantParserHandler::Int64(int64_t i)
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
-
-  parser->PushObject(CVariant(boolean != 0));
-  parser->PopObject();
-
-  return 1;
+  return Primitive(i);
 }
 
-int CJSONVariantParser::ParseInteger(void * ctx, long long integerVal)
+bool CJSONVariantParserHandler::Uint64(uint64_t u)
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
-
-  parser->PushObject(CVariant((int64_t)integerVal));
-  parser->PopObject();
-
-  return 1;
+  return Primitive(u);
 }
 
-int CJSONVariantParser::ParseDouble(void * ctx, double doubleVal)
+bool CJSONVariantParserHandler::Double(double d)
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
-
-  parser->PushObject(CVariant((float)doubleVal));
-  parser->PopObject();
-
-  return 1;
+  return Primitive(d);
 }
 
-int CJSONVariantParser::ParseString(void * ctx, const unsigned char * stringVal, size_t stringLen)
+bool CJSONVariantParserHandler::String(const char* str, rapidjson::SizeType length, bool copy)
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
-
-  parser->PushObject(CVariant((const char *)stringVal, stringLen));
-  parser->PopObject();
-
-  return 1;
+  return Primitive(str, length);
 }
 
-int CJSONVariantParser::ParseMapStart(void * ctx)
+bool CJSONVariantParserHandler::StartObject()
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
+  PushObject(CVariant::VariantTypeObject);
 
-  parser->PushObject(CVariant::VariantTypeObject);
-
-  return 1;
+  return true;
 }
 
-int CJSONVariantParser::ParseMapKey(void * ctx, const unsigned char * stringVal, size_t stringLen)
+bool CJSONVariantParserHandler::Key(const char* str, rapidjson::SizeType length, bool copy)
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
-
-  parser->m_key = std::string((const char *)stringVal, 0, stringLen);
+  m_key = std::string(str, 0, length);
 
-  return 1;
+  return true;
 }
 
-int CJSONVariantParser::ParseMapEnd(void * ctx)
+bool CJSONVariantParserHandler::EndObject(rapidjson::SizeType memberCount)
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
+  PopObject();
 
-  parser->PopObject();
-
-  return 1;
+  return true;
 }
 
-int CJSONVariantParser::ParseArrayStart(void * ctx)
+bool CJSONVariantParserHandler::StartArray()
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
-
-  parser->PushObject(CVariant::VariantTypeArray);
+  PushObject(CVariant::VariantTypeArray);
 
-  return 1;
+  return true;
 }
 
-int CJSONVariantParser::ParseArrayEnd(void * ctx)
+bool CJSONVariantParserHandler::EndArray(rapidjson::SizeType elementCount)
 {
-  CJSONVariantParser *parser = (CJSONVariantParser *)ctx;
-
-  parser->PopObject();
+  PopObject();
 
-  return 1;
+  return true;
 }
 
-void CJSONVariantParser::PushObject(CVariant variant)
+void CJSONVariantParserHandler::PushObject(CVariant variant)
 {
-  if (m_status == ParseObject)
+  if (m_status == PARSE_STATUS::Object)
   {
     (*m_parse[m_parse.size() - 1])[m_key] = variant;
     m_parse.push_back(&(*m_parse[m_parse.size() - 1])[m_key]);
   }
-  else if (m_status == ParseArray)
+  else if (m_status == PARSE_STATUS::Array)
   {
     CVariant *temp = m_parse[m_parse.size() - 1];
     temp->push_back(variant);
     m_parse.push_back(&(*temp)[temp->size() - 1]);
   }
   else if (m_parse.empty())
-  {
     m_parse.push_back(new CVariant(variant));
-  }
 
   if (variant.isObject())
-    m_status = ParseObject;
+    m_status = PARSE_STATUS::Object;
   else if (variant.isArray())
-    m_status = ParseArray;
+    m_status = PARSE_STATUS::Array;
   else
-    m_status = ParseVariable;
+    m_status = PARSE_STATUS::Variable;
 }
 
-void CJSONVariantParser::PopObject()
+void CJSONVariantParserHandler::PopObject()
 {
   CVariant *variant = m_parse[m_parse.size() - 1];
   m_parse.pop_back();
 
-  if (m_parse.size())
+  if (!m_parse.empty())
   {
     variant = m_parse[m_parse.size() - 1];
     if (variant->isObject())
-      m_status = ParseObject;
+      m_status = PARSE_STATUS::Object;
     else if (variant->isArray())
-      m_status = ParseArray;
+      m_status = PARSE_STATUS::Array;
     else
-      m_status = ParseVariable;
+      m_status = PARSE_STATUS::Variable;
   }
-  else if (m_callback)
+  else
   {
-    m_callback->onParsed(variant);
+    m_parsedObject = *variant;
     delete variant;
 
-    m_parse.clear();
-    m_status = ParseVariable;
+    m_status = PARSE_STATUS::Variable;
   }
 }
+
+bool CJSONVariantParser::Parse(const char* json, CVariant& data)
+{
+  if (json == nullptr)
+    return false;
+
+  rapidjson::Reader reader;
+  rapidjson::StringStream stringStream(json);
+
+  CJSONVariantParserHandler handler(data);
+  if (reader.Parse(stringStream, handler))
+    return true;
+
+  return false;
+}
+
+bool CJSONVariantParser::Parse(const std::string& json, CVariant& data)
+{
+  return Parse(json.c_str(), data);
+}
diff -Naur kodi-17.1-Krypton/xbmc/utils/JSONVariantParser.h kodi-17.1-Krypton.patch/xbmc/utils/JSONVariantParser.h
--- kodi-17.1-Krypton/xbmc/utils/JSONVariantParser.h	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/utils/JSONVariantParser.h	2017-03-25 11:51:12.772040708 +0100
@@ -1,6 +1,6 @@
 #pragma once
 /*
- *      Copyright (C) 2005-2013 Team XBMC
+ *      Copyright (C) 2015 Team XBMC
  *      http://xbmc.org
  *
  *  This Program is free software; you can redistribute it and/or modify
@@ -20,71 +20,14 @@
  */
 
 #include <string>
-#include <vector>
 
 #include "utils/Variant.h"
 
-#include <yajl/yajl_parse.h>
-
-class IParseCallback
-{
-public:
-  virtual ~IParseCallback() { }
-
-  virtual void onParsed(CVariant *variant) = 0;
-};
-
-class CSimpleParseCallback : public IParseCallback
-{
-public:
-  virtual void onParsed(CVariant *variant) { m_parsed = *variant; }
-  CVariant &GetOutput() { return m_parsed; }
-
-private:
-  CVariant m_parsed;
-};
-
 class CJSONVariantParser
 {
 public:
-  CJSONVariantParser(IParseCallback *callback);
-  ~CJSONVariantParser();
-
-  void push_buffer(const unsigned char *buffer, unsigned int length);
-
-  static CVariant Parse(const unsigned char *json, unsigned int length);
-
-  static CVariant Parse(const std::string& json);
-
-private:
-  static int ParseNull(void * ctx);
-  static int ParseBoolean(void * ctx, int boolean);
-  static int ParseInteger(void * ctx, long long integerVal);
-  static int ParseDouble(void * ctx, double doubleVal);
-  static int ParseString(void * ctx, const unsigned char * stringVal, size_t stringLen);
-  static int ParseMapStart(void * ctx);
-  static int ParseMapKey(void * ctx, const unsigned char * stringVal, size_t stringLen);
-  static int ParseMapEnd(void * ctx);
-  static int ParseArrayStart(void * ctx);
-  static int ParseArrayEnd(void * ctx);
-
-  void PushObject(CVariant variant);
-  void PopObject();
-
-  static yajl_callbacks callbacks;
-
-  IParseCallback *m_callback;
-  yajl_handle m_handler;
-
-  CVariant m_parsedObject;
-  std::vector<CVariant *> m_parse;
-  std::string m_key;
+  CJSONVariantParser() = delete;
 
-  enum PARSE_STATUS
-  {
-    ParseArray = 1,
-    ParseObject = 2,
-    ParseVariable = 0
-  };
-  PARSE_STATUS m_status;
+  static bool Parse(const char* json, CVariant& data);
+  static bool Parse(const std::string& json, CVariant& data);
 };
diff -Naur kodi-17.1-Krypton/xbmc/utils/JSONVariantWriter.cpp kodi-17.1-Krypton.patch/xbmc/utils/JSONVariantWriter.cpp
--- kodi-17.1-Krypton/xbmc/utils/JSONVariantWriter.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/utils/JSONVariantWriter.cpp	2017-03-25 11:51:13.085041457 +0100
@@ -1,5 +1,5 @@
 /*
- *      Copyright (C) 2005-2013 Team XBMC
+ *      Copyright (C) 2015 Team XBMC
  *      http://xbmc.org
  *
  *  This Program is free software; you can redistribute it and/or modify
@@ -18,113 +18,87 @@
  *
  */
 
-#include <locale>
-
 #include "JSONVariantWriter.h"
-#include "utils/Variant.h"
 
-std::string CJSONVariantWriter::Write(const CVariant &value, bool compact)
-{
-  std::string output;
+#include <rapidjson/prettywriter.h>
+#include <rapidjson/stringbuffer.h>
+#include <rapidjson/writer.h>
 
-  yajl_gen g = yajl_gen_alloc(NULL);
-  yajl_gen_config(g, yajl_gen_beautify, compact ? 0 : 1);
-  yajl_gen_config(g, yajl_gen_indent_string, "\t");
-
-  // Set locale to classic ("C") to ensure valid JSON numbers
-#ifndef TARGET_WINDOWS
-  const char *currentLocale = setlocale(LC_NUMERIC, NULL);
-  std::string backupLocale;
-  if (currentLocale != NULL && (currentLocale[0] != 'C' || currentLocale[1] != 0))
-  {
-    backupLocale = currentLocale;
-    setlocale(LC_NUMERIC, "C");
-  }
-#else  // TARGET_WINDOWS
-  const wchar_t* const currentLocale = _wsetlocale(LC_NUMERIC, NULL);
-  std::wstring backupLocale;
-  if (currentLocale != NULL && (currentLocale[0] != L'C' || currentLocale[1] != 0))
-  {
-    backupLocale = currentLocale;
-    _wsetlocale(LC_NUMERIC, L"C");
-  }
-#endif // TARGET_WINDOWS
-
-  if (InternalWrite(g, value))
-  {
-    const unsigned char * buffer;
-
-    size_t length;
-    yajl_gen_get_buf(g, &buffer, &length);
-    output = std::string((const char *)buffer, length);
-  }
-
-  // Re-set locale to what it was before using yajl
-#ifndef TARGET_WINDOWS
-  if (!backupLocale.empty())
-    setlocale(LC_NUMERIC, backupLocale.c_str());
-#else  // TARGET_WINDOWS
-  if (!backupLocale.empty())
-    _wsetlocale(LC_NUMERIC, backupLocale.c_str());
-#endif // TARGET_WINDOWS
-
-  yajl_gen_clear(g);
-  yajl_gen_free(g);
-
-  return output;
-}
+#include "utils/Variant.h"
 
-bool CJSONVariantWriter::InternalWrite(yajl_gen g, const CVariant &value)
+template<class TWriter>
+bool InternalWrite(TWriter& writer, const CVariant &value)
 {
-  bool success = false;
-
   switch (value.type())
   {
   case CVariant::VariantTypeInteger:
-    success = yajl_gen_status_ok == yajl_gen_integer(g, (long long int)value.asInteger());
-    break;
+    return writer.Int64(value.asInteger());
+
   case CVariant::VariantTypeUnsignedInteger:
-    success = yajl_gen_status_ok == yajl_gen_integer(g, (long long int)value.asUnsignedInteger());
-    break;
+    return writer.Uint64(value.asUnsignedInteger());
+
   case CVariant::VariantTypeDouble:
-    success = yajl_gen_status_ok == yajl_gen_double(g, value.asDouble());
-    break;
+    return writer.Double(value.asDouble());
+
   case CVariant::VariantTypeBoolean:
-    success = yajl_gen_status_ok == yajl_gen_bool(g, value.asBoolean() ? 1 : 0);
-    break;
+    return writer.Bool(value.asBoolean());
+
   case CVariant::VariantTypeString:
-    success = yajl_gen_status_ok == yajl_gen_string(g, (const unsigned char*)value.c_str(), (size_t)value.size());
-    break;
+    return writer.String(value.c_str(), value.size());
+
   case CVariant::VariantTypeArray:
-    success = yajl_gen_status_ok == yajl_gen_array_open(g);
+    if (!writer.StartArray())
+      return false;
 
-    for (CVariant::const_iterator_array itr = value.begin_array(); itr != value.end_array() && success; ++itr)
-      success &= InternalWrite(g, *itr);
+    for (CVariant::const_iterator_array itr = value.begin_array(); itr != value.end_array(); ++itr)
+    {
+      if (!InternalWrite(writer, *itr))
+        return false;
+    }
 
-    if (success)
-      success = yajl_gen_status_ok == yajl_gen_array_close(g);
+    return writer.EndArray(value.size());
 
-    break;
   case CVariant::VariantTypeObject:
-    success = yajl_gen_status_ok == yajl_gen_map_open(g);
+    if (!writer.StartObject())
+      return false;
 
-    for (CVariant::const_iterator_map itr = value.begin_map(); itr != value.end_map() && success; ++itr)
+    for (CVariant::const_iterator_map itr = value.begin_map(); itr != value.end_map(); ++itr)
     {
-      success &= yajl_gen_status_ok == yajl_gen_string(g, (const unsigned char*)itr->first.c_str(), (size_t)itr->first.length());
-      if (success)
-        success &= InternalWrite(g, itr->second);
+      if (!writer.Key(itr->first.c_str()) ||
+        !InternalWrite(writer, itr->second))
+        return false;
     }
 
-    if (success)
-      success &= yajl_gen_status_ok == yajl_gen_map_close(g);
+    return writer.EndObject(value.size());
 
-    break;
   case CVariant::VariantTypeConstNull:
   case CVariant::VariantTypeNull:
   default:
-    success = yajl_gen_status_ok == yajl_gen_null(g);
-    break;
+    return writer.Null();
+  }
+
+  return false;
+}
+
+bool CJSONVariantWriter::Write(const CVariant &value, std::string& output, bool compact)
+{
+  rapidjson::StringBuffer stringBuffer;
+  if (compact)
+  {
+    rapidjson::Writer<rapidjson::StringBuffer> writer(stringBuffer);
+
+    if (!InternalWrite(writer, value) || !writer.IsComplete())
+      return false;
+  }
+  else
+  {
+    rapidjson::PrettyWriter<rapidjson::StringBuffer> writer(stringBuffer);
+    writer.SetIndent('\t', 1);
+
+    if (!InternalWrite(writer, value) || !writer.IsComplete())
+      return false;
   }
 
-  return success;
+  output = stringBuffer.GetString();
+  return true;
 }
diff -Naur kodi-17.1-Krypton/xbmc/utils/JSONVariantWriter.h kodi-17.1-Krypton.patch/xbmc/utils/JSONVariantWriter.h
--- kodi-17.1-Krypton/xbmc/utils/JSONVariantWriter.h	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/utils/JSONVariantWriter.h	2017-03-25 11:51:13.085041457 +0100
@@ -1,6 +1,6 @@
 #pragma once
 /*
- *      Copyright (C) 2005-2013 Team XBMC
+ *      Copyright (C) 2015 Team XBMC
  *      http://xbmc.org
  *
  *  This Program is free software; you can redistribute it and/or modify
@@ -19,7 +19,6 @@
  *
  */
 
-#include <yajl/yajl_gen.h>
 #include <string>
 
 class CVariant;
@@ -27,7 +26,7 @@
 class CJSONVariantWriter
 {
 public:
-  static std::string Write(const CVariant &value, bool compact);
-private:
-  static bool InternalWrite(yajl_gen g, const CVariant &value);
+  CJSONVariantWriter() = delete;
+
+  static bool Write(const CVariant &value, std::string& output, bool compact);
 };
diff -Naur kodi-17.1-Krypton/xbmc/utils/test/TestJSONVariantParser.cpp kodi-17.1-Krypton.patch/xbmc/utils/test/TestJSONVariantParser.cpp
--- kodi-17.1-Krypton/xbmc/utils/test/TestJSONVariantParser.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/utils/test/TestJSONVariantParser.cpp	2017-03-25 11:51:12.772040708 +0100
@@ -23,12 +23,179 @@
 
 #include "gtest/gtest.h"
 
-TEST(TestJSONVariantParser, Parse)
+TEST(TestJSONVariantParser, CannotParseNullptr)
 {
   CVariant variant;
-  unsigned char buf[100];
+  ASSERT_FALSE(CJSONVariantParser::Parse(nullptr, variant));
+}
+
+TEST(TestJSONVariantParser, CannotParseEmptyString)
+{
+  CVariant variant;
+  ASSERT_FALSE(CJSONVariantParser::Parse("", variant));
+  ASSERT_FALSE(CJSONVariantParser::Parse(std::string(), variant));
+}
+
+TEST(TestJSONVariantParser, CannotParseInvalidJson)
+{
+  CVariant variant;
+  ASSERT_FALSE(CJSONVariantParser::Parse("{", variant));
+  ASSERT_FALSE(CJSONVariantParser::Parse("}", variant));
+  ASSERT_FALSE(CJSONVariantParser::Parse("[", variant));
+  ASSERT_FALSE(CJSONVariantParser::Parse("]", variant));
+  ASSERT_FALSE(CJSONVariantParser::Parse("foo", variant));
+}
+
+TEST(TestJSONVariantParser, CanParseNull)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("null", variant));
+  ASSERT_TRUE(variant.isNull());
+}
+
+TEST(TestJSONVariantParser, CanParseBoolean)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("true", variant));
+  ASSERT_TRUE(variant.isBoolean());
+  ASSERT_TRUE(variant.asBoolean());
+
+  ASSERT_TRUE(CJSONVariantParser::Parse("false", variant));
+  ASSERT_TRUE(variant.isBoolean());
+  ASSERT_FALSE(variant.asBoolean());
+}
+
+TEST(TestJSONVariantParser, CanParseSignedInteger)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("-1", variant));
+  ASSERT_TRUE(variant.isInteger());
+  ASSERT_EQ(-1, variant.asInteger());
+}
+
+TEST(TestJSONVariantParser, CanParseUnsignedInteger)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("0", variant));
+  ASSERT_TRUE(variant.isUnsignedInteger());
+  ASSERT_EQ(0, variant.asUnsignedInteger());
+
+  ASSERT_TRUE(CJSONVariantParser::Parse("1", variant));
+  ASSERT_TRUE(variant.isUnsignedInteger());
+  ASSERT_EQ(1, variant.asUnsignedInteger());
+}
+
+TEST(TestJSONVariantParser, CanParseSignedInteger64)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("-4294967296", variant));
+  ASSERT_TRUE(variant.isInteger());
+  ASSERT_EQ(-4294967296, variant.asInteger());
+}
+
+TEST(TestJSONVariantParser, CanParseUnsignedInteger64)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("4294967296", variant));
+  ASSERT_TRUE(variant.isUnsignedInteger());
+  ASSERT_EQ(4294967296, variant.asUnsignedInteger());
+}
+
+TEST(TestJSONVariantParser, CanParseDouble)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("0.0", variant));
+  ASSERT_TRUE(variant.isDouble());
+  ASSERT_EQ(0.0, variant.asDouble());
+
+  ASSERT_TRUE(CJSONVariantParser::Parse("1.0", variant));
+  ASSERT_TRUE(variant.isDouble());
+  ASSERT_EQ(1.0, variant.asDouble());
+
+  ASSERT_TRUE(CJSONVariantParser::Parse("-1.0", variant));
+  ASSERT_TRUE(variant.isDouble());
+  ASSERT_EQ(-1.0, variant.asDouble());
+}
+
+TEST(TestJSONVariantParser, CanParseString)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("\"\"", variant));
+  ASSERT_TRUE(variant.isString());
+  ASSERT_TRUE(variant.empty());
+
+  ASSERT_TRUE(CJSONVariantParser::Parse("\"foo\"", variant));
+  ASSERT_TRUE(variant.isString());
+  ASSERT_STREQ("foo", variant.asString().c_str());
+
+  ASSERT_TRUE(CJSONVariantParser::Parse("\"foo bar\"", variant));
+  ASSERT_TRUE(variant.isString());
+  ASSERT_STREQ("foo bar", variant.asString().c_str());
+}
+
+TEST(TestJSONVariantParser, CanParseObject)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("{}", variant));
+  ASSERT_TRUE(variant.isObject());
+  ASSERT_TRUE(variant.empty());
+
+  variant.clear();
+  ASSERT_TRUE(CJSONVariantParser::Parse("{ \"foo\": \"bar\" }", variant));
+  ASSERT_TRUE(variant.isObject());
+  ASSERT_TRUE(variant.isMember("foo"));
+  ASSERT_TRUE(variant["foo"].isString());
+  ASSERT_STREQ("bar", variant["foo"].asString().c_str());
+
+  variant.clear();
+  ASSERT_TRUE(CJSONVariantParser::Parse("{ \"foo\": \"bar\", \"bar\": true }", variant));
+  ASSERT_TRUE(variant.isObject());
+  ASSERT_TRUE(variant.isMember("foo"));
+  ASSERT_TRUE(variant["foo"].isString());
+  ASSERT_STREQ("bar", variant["foo"].asString().c_str());
+  ASSERT_TRUE(variant.isMember("bar"));
+  ASSERT_TRUE(variant["bar"].isBoolean());
+  ASSERT_TRUE(variant["bar"].asBoolean());
+
+  variant.clear();
+  ASSERT_TRUE(CJSONVariantParser::Parse("{ \"foo\": { \"sub-foo\": \"bar\" } }", variant));
+  ASSERT_TRUE(variant.isObject());
+  ASSERT_TRUE(variant.isMember("foo"));
+  ASSERT_TRUE(variant["foo"].isObject());
+  ASSERT_TRUE(variant["foo"].isMember("sub-foo"));
+  ASSERT_TRUE(variant["foo"]["sub-foo"].isString());
+  ASSERT_STREQ("bar", variant["foo"]["sub-foo"].asString().c_str());
+}
+
+TEST(TestJSONVariantParser, CanParseArray)
+{
+  CVariant variant;
+  ASSERT_TRUE(CJSONVariantParser::Parse("[]", variant));
+  ASSERT_TRUE(variant.isArray());
+  ASSERT_TRUE(variant.empty());
+
+  variant.clear();
+  ASSERT_TRUE(CJSONVariantParser::Parse("[ true ]", variant));
+  ASSERT_TRUE(variant.isArray());
+  ASSERT_EQ(1, variant.size());
+  ASSERT_TRUE(variant[0].isBoolean());
+  ASSERT_TRUE(variant[0].asBoolean());
+
+  variant.clear();
+  ASSERT_TRUE(CJSONVariantParser::Parse("[ true, \"foo\" ]", variant));
+  ASSERT_TRUE(variant.isArray());
+  ASSERT_EQ(2, variant.size());
+  ASSERT_TRUE(variant[0].isBoolean());
+  ASSERT_TRUE(variant[0].asBoolean());
+  ASSERT_TRUE(variant[1].isString());
+  ASSERT_STREQ("foo", variant[1].asString().c_str());
 
-  memset(buf, 0, sizeof(buf));
-  variant = CJSONVariantParser::Parse(buf, sizeof(buf));
-  EXPECT_TRUE(variant.isNull());
+  variant.clear();
+  ASSERT_TRUE(CJSONVariantParser::Parse("[ { \"foo\": \"bar\" } ]", variant));
+  ASSERT_TRUE(variant.isArray());
+  ASSERT_EQ(1, variant.size());
+  ASSERT_TRUE(variant[0].isObject());
+  ASSERT_TRUE(variant[0].isMember("foo"));
+  ASSERT_TRUE(variant[0]["foo"].isString());
+  ASSERT_STREQ("bar", variant[0]["foo"].asString().c_str());
 }
diff -Naur kodi-17.1-Krypton/xbmc/utils/test/TestJSONVariantWriter.cpp kodi-17.1-Krypton.patch/xbmc/utils/test/TestJSONVariantWriter.cpp
--- kodi-17.1-Krypton/xbmc/utils/test/TestJSONVariantWriter.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/utils/test/TestJSONVariantWriter.cpp	2017-03-25 11:51:13.085041457 +0100
@@ -23,11 +23,141 @@
 
 #include "gtest/gtest.h"
 
-TEST(TestJSONVariantWriter, Write)
+TEST(TestJSONVariantWriter, CanWriteNull)
 {
   CVariant variant;
   std::string str;
 
-  str = CJSONVariantWriter::Write(variant, false);
-  EXPECT_STREQ("null\n", str.c_str());
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("null", str.c_str());
+}
+
+TEST(TestJSONVariantWriter, CanWriteBoolean)
+{
+  CVariant variant(true);
+  std::string str;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("true", str.c_str());
+
+  variant = false;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("false", str.c_str());
+}
+
+TEST(TestJSONVariantWriter, CanWriteSignedInteger)
+{
+  CVariant variant(-1);
+  std::string str;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("-1", str.c_str());
+}
+
+TEST(TestJSONVariantWriter, CanWriteUnsignedInteger)
+{
+  CVariant variant(0);
+  std::string str;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("0", str.c_str());
+
+  variant = 1;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("1", str.c_str());
+}
+
+TEST(TestJSONVariantWriter, CanWriteSignedInteger64)
+{
+  CVariant variant(static_cast<int64_t>(-4294967296LL));
+  std::string str;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("-4294967296", str.c_str());
+}
+
+TEST(TestJSONVariantWriter, CanWriteUnsignedInteger64)
+{
+  CVariant variant(static_cast<int64_t>(4294967296LL));
+  std::string str;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("4294967296", str.c_str());
+}
+
+TEST(TestJSONVariantWriter, CanWriteDouble)
+{
+  CVariant variant(0.0);
+  std::string str;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("0.0", str.c_str());
+
+  variant = 1.0;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("1.0", str.c_str());
+
+  variant = -1.0;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("-1.0", str.c_str());
+}
+
+TEST(TestJSONVariantWriter, CanWriteString)
+{
+  CVariant variant("");
+  std::string str;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("\"\"", str.c_str());
+
+  variant = "foo";
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("\"foo\"", str.c_str());
+
+  variant = "foo bar";
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("\"foo bar\"", str.c_str());
+}
+
+TEST(TestJSONVariantWriter, CanWriteObject)
+{
+  CVariant variant(CVariant::VariantTypeObject);
+  std::string str;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("{}", str.c_str());
+
+  variant.clear();
+  variant["foo"] = "bar";
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("{\n\t\"foo\": \"bar\"\n}", str.c_str());
+
+  variant.clear();
+  variant["foo"] = "bar";
+  variant["bar"] = true;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("{\n\t\"bar\": true,\n\t\"foo\": \"bar\"\n}", str.c_str());
+
+  variant.clear();
+  variant["foo"]["sub-foo"] = "bar";
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("{\n\t\"foo\": {\n\t\t\"sub-foo\": \"bar\"\n\t}\n}", str.c_str());
+}
+
+TEST(TestJSONVariantWriter, CanWriteArray)
+{
+  CVariant variant(CVariant::VariantTypeArray);
+  std::string str;
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("[]", str.c_str());
+
+  variant.clear();
+  variant.push_back(true);
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("[\n\ttrue\n]", str.c_str());
+
+  variant.clear();
+  variant.push_back(true);
+  variant.push_back("foo");
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("[\n\ttrue,\n\t\"foo\"\n]", str.c_str());
+
+  variant.clear();
+  CVariant obj(CVariant::VariantTypeObject);
+  obj["foo"] = "bar";
+  variant.push_back(obj);
+  ASSERT_TRUE(CJSONVariantWriter::Write(variant, str, false));
+  ASSERT_STREQ("[\n\t{\n\t\t\"foo\": \"bar\"\n\t}\n]", str.c_str());
 }
diff -Naur kodi-17.1-Krypton/xbmc/utils/Variant.cpp kodi-17.1-Krypton.patch/xbmc/utils/Variant.cpp
--- kodi-17.1-Krypton/xbmc/utils/Variant.cpp	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/utils/Variant.cpp	2017-03-25 11:51:12.770040703 +0100
@@ -336,6 +336,11 @@
 
 bool CVariant::isInteger() const
 {
+  return isSignedInteger() || isUnsignedInteger();
+}
+
+bool CVariant::isSignedInteger() const
+{
   return m_type == VariantTypeInteger;
 }
 
diff -Naur kodi-17.1-Krypton/xbmc/utils/Variant.h kodi-17.1-Krypton.patch/xbmc/utils/Variant.h
--- kodi-17.1-Krypton/xbmc/utils/Variant.h	2017-03-20 17:17:49.000000000 +0100
+++ kodi-17.1-Krypton.patch/xbmc/utils/Variant.h	2017-03-25 11:51:12.770040703 +0100
@@ -75,6 +75,7 @@
 
   
   bool isInteger() const;
+  bool isSignedInteger() const;
   bool isUnsignedInteger() const;
   bool isBoolean() const;
   bool isString() const;

From ac8d428dd6a756670788a8eb49afd3319d62a26d Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 26 Mar 2017 19:18:43 +0300
Subject: [PATCH 1/2] [fix] fix build error with rapidjson 1.1.0

---
 xbmc/utils/JSONVariantParser.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/xbmc/utils/JSONVariantParser.cpp b/xbmc/utils/JSONVariantParser.cpp
index f6f4d2b..a690df3 100644
--- a/xbmc/utils/JSONVariantParser.cpp
+++ b/xbmc/utils/JSONVariantParser.cpp
@@ -34,6 +34,7 @@ class CJSONVariantParserHandler
   bool Int64(int64_t i);
   bool Uint64(uint64_t u);
   bool Double(double d);
+  bool RawNumber(const char* str, rapidjson::SizeType length, bool copy);
   bool String(const char* str, rapidjson::SizeType length, bool copy);
   bool StartObject();
   bool Key(const char* str, rapidjson::SizeType length, bool copy);
@@ -112,6 +113,11 @@ bool CJSONVariantParserHandler::Double(double d)
   return Primitive(d);
 }
 
+bool CJSONVariantParserHandler::RawNumber(const char* str, rapidjson::SizeType length, bool copy)
+{
+  return Primitive(str, length);
+}
+
 bool CJSONVariantParserHandler::String(const char* str, rapidjson::SizeType length, bool copy)
 {
   return Primitive(str, length);
